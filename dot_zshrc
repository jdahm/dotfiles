#
# Startup
#

# not running interactively then bail
[[ $- != *i* ]] && return

#
# ZSH Settings
#
setopt correct                                                  # Auto correct mistakes
setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
setopt nocaseglob                                               # Case insensitive globbing
setopt rcexpandparam                                            # Array expension with parameters
setopt nocheckjobs                                              # Don't warn about running processes when exiting
setopt numericglobsort                                          # Sort filenames numerically when it makes sense
setopt nobeep                                                   # No beep
setopt share_history                                            # share history accross all sessions
setopt appendhistory                                            # Immediately append history instead of overwriting
setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
setopt autocd                                                   # if only directory path is entered, cd there.
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushdminus

HISTFILE=~/.zhistory
HISTSIZE=50000
SAVEHIST=10000

# Completion.
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' rehash true                              # automatically find new executables in path
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'
zstyle ':completion:*:descriptions' format '%U%F{cyan}%d%f%u'

# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zcache

# automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

# Download Znap, if it's not there yet.
[[ -f ~/.zsh/zsh-snap/znap.zsh ]] ||
    git clone --depth 1 -- \
        https://github.com/marlonrichert/zsh-snap.git ~/.zsh/zsh-snap

source ~/.zsh/zsh-snap/znap.zsh  # Start Znap

if [ -f ~/.config/brew/path ]; then
  HOMEBREW_PATH=$(cat ~/.config/brew/path)
  path=($HOMEBREW_PATH/bin $path[@])
  fpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath[@])
fi

path=($HOME/bin $HOME/go/bin $path[@])

# pyenv
(( $+commands[pyenv] )) && eval "$(pyenv init -)"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# direnv
(( $+commands[direnv] )) && eval "$(direnv hook zsh)"

# `znap source` automatically downloads and starts your plugins.
znap source zsh-users/zsh-completions
# znap source agkozak/zsh-z
znap source zsh-users/zsh-autosuggestions
znap source zsh-users/zsh-syntax-highlighting
znap source hlissner/zsh-autopair

# znap source marlonrichert/zsh-autocomplete
# zstyle ':autocomplete:*' min-input 3
# zstyle ':autocomplete:*' min-delay 0.5

# export TYPEWRITTEN_CURSOR=underscore
# znap prompt reobin/typewritten
znap prompt sindresorhus/pure

# function zvm_config() {
#   # ZVM_INIT_MODE=sourcing
#   ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT
#   ZVM_VI_INSERT_ESCAPE_BINDKEY=zx
# }
# znap source jeffreytse/zsh-vi-mode

WORDCHARS=${WORDCHARS/\/}

(( $+commands[bat] )) && alias cat=bat
(( $+commands[exa] )) && alias ls=exa

if (( $+commands[nvim] )); then
    alias vi=nvim
    alias vim=nvim
    export EDITOR=nvim
    export VISUAL=nvim
fi

export PAGER=less

(( $+commands[chezmoi] )) && alias chezmoi-cd="cd $(chezmoi source-path)"
(( $+commands[brew] )) && alias brew-update="brew bundle --cleanup --global"
(( $+commands[pbcopy] )) && alias coauth='printf "Co-authored-by: %s" "$(git log --pretty=format:"%an <%ae>" -1000 | sort | uniq | fzf)" | pbcopy'

if (( $+commands[kitty] )); then
    alias icat="kitty +kitten icat"
    alias s="kitty +kitten ssh"
    alias hg="kitty +kitten hyperlinked_grep"
fi

if [[ -n $KITTY_WINDOW_ID ]]; then
    alias e="edit-in-kitty"
else
    alias e=$EDITOR
fi

if (( $+commands[nnn] )); then
    n ()
    {
        # Block nesting of nnn in subshells
        if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
            echo "nnn is already running"
            return
        fi

        # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
        # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
        # see. To cd on quit only on ^G, remove the "export" and make sure not to
        # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
        #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
        export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

        # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
        # stty start undef
        # stty stop undef
        # stty lwrap undef
        # stty lnext undef

        nnn "$@"

        if [ -f "$NNN_TMPFILE" ]; then
                . "$NNN_TMPFILE"
                rm -f "$NNN_TMPFILE" > /dev/null
        fi
    }
fi

# Nix
export NIX_FILE=/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
[ -e $NIX_FILE ] && source $NIX_FILE

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
